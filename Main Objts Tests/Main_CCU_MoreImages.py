# -*- coding: utf-8 -*-
"""
Created on Wed Apr 24 15:27:27 2024

@author: jpila
"""

import CameraCalibration as CC
import SizeEstimations as SE
import cv2 as cv
import pickle 
import numpy as np


######## Calibrate Camera test with Post its   

# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)

objPts = np.float32([[0,0,0],[73.6,0,0],[0,117.4,0],[73.6,117.4,0],
                   [26.6,6,0],[8,40,0],[40,29.6,0],[23.8,51,0],[19.5,74.2,0],[37.6,72,0],[1.2,88,0],[19,98.5,0],[7,14.4,0],[10.4,21.6,0], #1- 9
                   [1,54.4,0],[7.6,57.4,0],[27,21.4,0],[29.4,28.2,0],[27.2,36,0],[34.2,39,0],[24,81.2,0],[26.4,87.6,0],[42.6,14,0],[45.8,20.6,0], #10 - 14
                   [35.4,45.4,0],[41,50.2,0],[34.6,96.2,0],[37.6,89.6,0],[52,0,0],[59,3.8,0],[50.2,44.2,0],[52.6,51.2,0],[46.4,71.2,0],[54,69.6,0], # 16 - 20 
                   [48.2,87,0],[55,90,0],[44.4,112.8,0],[47,106,0],[66,22.2,0],[72.4,26,0],[66.6,41,0],[70,47.8,0],[66,63.2,0],[72.4,65.6,0], # 21 - 25
                   [66.8,84.4,0],[68.2,92,0],[61.2,103.2,0],[64.2,110,0]]) #26 - 27


imgPts = np.float32([[405,52],[159,78],[578,364],[160,443],#Table points
                     [320,68],[417,124],[288,116],[367,156],[411,218],[328,224],[513,251],[451,304],[394,75],[389,87],#1- 9
                     [462,154],[437,164],[331,92],[326,108],[341,123],[315,133],[404,243],[399,268],[269,86],[260,99], #10 - 14
                     [316,147],[295,162],[370,309],[345,285],[233,68],[208,76],[255,152],[246,172],[287,225],[251,226], #16 - 20 
                     [290,284],[256,300],[338,394],[313,363],[187,113],[162,125],[188,154],[174,174],[194,213],[164,226], # 21 - 25
                     [195,287],[187,317],[228,362],[215,397]]) #26 - 27

imgPts0 = np.float32([[411,37],[166,63],[589,348],[177,432],#Table points
                     [327,53],[429,110],[296,101],[376,140],[423,204],[339,209],[524,237],[465,290],[402,61],[398,72],#1- 9
                     [471,139],[449,150],[339,77],[333,94],[349,109],[323,119],[415,229],[411,255],[276,72],[268,85], #10 - 14
                     [326,132],[303,150],[383,295],[359,269],[238,53],[214,61],[264,135],[256,158],[300,211],[261,212], #16 - 20 
                     [303,268],[268,286],[353,380],[328,350],[195,98],[168,110],[196,139],[183,159],[203,200],[171,213], # 21 - 25
                     [207,273],[202,303],[244,348],[231,384]]) #26 - 27

imgPts1 = np.float32([[635,245],[494,69],[76,394],[75,148],#Table points
                     [561,174],[473,265],[452,156],[394,222],[290,262],[279,199],[240,354],[170,292],[575,237],[542,233],#1- 9
                     [423,310],[394,286],[509,184],[476,183],[450,196],[426,178],[253,255],[217,251],[503,139],[474,133], #10 - 14
                     [399,182],[365,167],[171,232],[200,214],[530,112],[507,97],[378,141],[348,140],[274,174],[272,150], #16 - 20 
                     [206,183],[187,166],[95,220],[123,203],[436,93],[413,82],[369,103],[338,99],[287,118],[269,106], # 21 - 25
                     [202,133],[172,136],[132,162],[103,161]]) #26 - 27

imgPts2 = np.float32([[618,247],[447,76],[54,469],[26,196],#Table points
                     [532,179],[457,287],[417,173],[371,248],[267,303],[246,236],[226,411],[141,351],[556,247],[523,246],#1- 9
                     [412,343],[378,320],[481,195],[449,198],[423,215],[395,199],[227,302],[186,300],[470,148],[438,146], #10 - 14
                     [367,204],[335,194],[137,284],[165,261],[492,117],[467,104],[343,161],[304,164],[236,208],[231,185], #16 - 20 
                     [165,226],[144,209],[54,276],[81,255],[393,106],[365,95],[325,121],[293,122],[243,146],[221,133], # 21 - 25
                     [156,170],[125,176],[85,209],[57,210]]) #26 - 27

imgPts3 = np.float32([[398,265],[492,86],[3,128],[146,13],#Table points
                     [416,177],[241,183],[343,118],[237,130],[153,118],[197,86],[72,149],[86,103],[345,221],[321,198],#1- 9
                     [174,184],[179,162],[356,156],[330,141],[298,139],[299,120],[143,107],[129,95],[409,130],[385,114], #10 - 14
                     [280,112],[272,97],[123,76],[149,74],[471,125],[465,107],[311,84],[289,74],[217,71],[236,59], #16 - 20 
                     [176,59],[181,47],[102,53],[125,51],[409,77],[404,63],[349,60],[330,49],[279,46],[280,34], # 21 - 25
                     [217,33],[198,28],[158,33],[145,25]]) #26 - 27

#######5 Objects Test 

# imgPts4 = np.float32([[20,184],[46,446],[434,65],[601,231],#Table points
#                       [51,250],[174,151],[166,257],[238,179],[323,140],[350,189],[342,88],[410,114],[72,182],[105,184],#1- 9
#                       [218,120],[240,133],[113,226],[148,226],[178,207],[203,226],[354,141],[390,142],[93,291],[129,292], #10 - 14
#                       [230,219],[265,230],[436,151],[418,167],[37,347],[57,372],[249,270],[290,268],[364,214],[376,244], #16 - 20 
#                       [430,198],[462,127],[513,157],[498,172],[161,373],[192,399],[264,340],[309,342],[369,296],[406,319], # 21 - 25
#                       [469,259],[505,254],[522,214],[555,215]]) #26 - 27

# imgPts4 = np.float32([[366,29],[123,61],[533,337],[116,416],#Table points
#                       [281,47],[377,101],[248,94],[325,123],[367,193],[284,200],[468,225],[405,277],[355,53],[349,66],#1- 9
#                       [421,127],[396,139],[290,71],[285,87],[300,100],[271,111],[359,216],[351,245],[230,66],[219,80], #10 - 14
#                       [275,124],[254,141],[322,283],[298,256],[195,50],[170,59],[214,130],[206,151],[244,203],[207,204], #16 - 20 
#                       [246,257],[211,275],[287,366],[264,335],[149,94],[125,106],[150,134],[135,155],[155,192],[123,206], # 21 - 25
#                       [154,262],[146,293],[184,336],[169,370]]) #26 - 27


#######For Addition of objects

# imgPts4 = np.float32([[395,26],[150,41],[542,338],[129,389],#Table points
#                       [310,38],[403,97],[276,82],[349,124],[386,187],[305,187],[486,225],[421,270],[385,48],[376,61],#1- 9
#                       [444,127],[418,138],[318,62],[312,77],[327,90],[299,101],[379,209],[369,236],[259,54],[248,66], #10 - 14
#                       [300,113],[277,128],[341,271],[319,237],[223,34],[198,41],[239,115],[229,134],[267,188],[228,186], #16 - 20 
#                       [266,239],[228,257],[303,351],[278,317],[177,76],[149,85],[174,115],[159,132],[177,170],[144,183], # 21 - 25
#                       [172,238],[165,270],[199,314],[181,348]]) #26 - 27


########Third test for pencil
imgPts4 = np.float32([[394,30],[154,56],[570,328],[168,408],#Table points
                      [312,46],[411,99],[283,91],[361,129],[406,191],[324,194],[506,221],[448,270],[386,52],[381,65],#1- 9
                      [454,127],[431,138],[323,69],[318,84],[334,97],[308,109],[400,212],[394,239],[262,63],[253,77], #10 - 14
                      [312,121],[290,136],[370,277],[343,251],[226,46],[200,54],[251,125],[243,146],[287,197],[249,198], #16 - 20 
                      [290,250],[256,268],[341,357],[314,326],[182,89],[156,101],[185,129],[171,147],[193,185],[162,197], # 21 - 25
                      [197,255],[190,286],[232,326],[220,362]]) #26 - 27

#Sample
# imgPts = np.float32([[],[],[],[],#Table points
#                      [],[],[],[],[],[],[],[],[],[],#1- 9
#                      [],[],[],[],[],[],[],[],[],[], #10 - 14
#                      [],[],[],[],[],[],[],[],[],[], #16 - 20 
#                      [],[],[],[],[],[],[],[],[],[], # 21 - 25
#                      [],[],[],[]]) #26 - 27




img1 = cv.imread('4sameTime1.jpg')

image = img1

##Show points in picture to verify
# for i in range (imgPts4.shape[0]):
#     coord = tuple(int(x) for x in imgPts4[i])
#     image = cv.circle(image,coord, 2,(0, 0, 255), -1)
    

gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
cv.imshow('Distorted',image)
cv.waitKey(0)


# Arrays to store object points and image points from all the images.
objP = [] # 3d point in real world space
imgP = [] # 2d points in image plane.
objP.append(objPts)
imgP.append(imgPts)

objP.append(objPts)
imgP.append(imgPts0)

objP.append(objPts)
imgP.append(imgPts1)

# objP.append(objPts)
# imgP.append(imgPts2)


# objP.append(objPts)
# imgP.append(imgPts3)

objP.append(objPts)
imgP.append(imgPts4)

#Create Objects
cali = CC.CameraCalibration(objP)
szEstim = SE.SizeEstimations()

ret, tMtx, dCoef, rvecs, tvecs =  cali.calibration(imgP,gray.shape[::-1])
tImg0 = szEstim.undistortTransform(image, tMtx, dCoef)


##Results 
cv.imshow('Undistorted',tImg0)
cv.waitKey(0)
cv.imwrite('getPixelsObj15.jpg',tImg0)

cv.destroyAllWindows()

toShow = np.concatenate((image,tImg0), axis = 1)
cv.imshow('Analyse',toShow)
cv.waitKey(0)
cv.destroyAllWindows()

###############Estimate Scale Factor

#Estimate  Pixel distance of  object of known dimensions 
objKnownPxDistance = szEstim.estimateDistance2Pixels([396,24],[592,335])
#Estimate  scale factor
sclFactor = szEstim.estimateScaleFactor(objKnownPxDistance, 117.4)

# print('Scale factor =',sclFactor)


###############Serialize Matrix, Distort coefficient and Scale Factor

# toSave = (tMtx, dCoef, sclFactor)

# # Open a file and use dump() 
# with open('ObjsCCOutPut3.pkl', 'wb') as file: 
      
#     # A new file will be created 
#     pickle.dump(toSave, file) 
